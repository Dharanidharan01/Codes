Task1)

class ATM {
  #balance = 1000; // private data

  checkBalance() {
    console.log(`Your balance is ₹${this.#balance}`);
  }

  withdraw(amount) {
    if (amount <= this.#balance) {
      this.#balance -= amount;
      console.log(`Withdrawn ₹${amount}. New balance: ₹${this.#balance}`);
    } else {
      console.log("Insufficient balance.");
    }
  }
}

const userATM = new ATM();
userATM.checkBalance();
userATM.withdraw(500);

Task 2)
class Department {
  constructor(deptName) {
    this.deptName = deptName;
  }

  showDepartment() {
    console.log(`Department: ${this.deptName}`);
  }
}

class Employee extends Department {
  constructor(name, deptName) {
    super(deptName); // call parent constructor
    this.name = name;
  }

  showEmployee() {
    console.log(`Employee: ${this.name}`);
    this.showDepartment(); // inherited method
  }
}

const emp = new Employee("Dharanidharan", "IT");
emp.showEmployee();



Task 3)

class Shape {
  calculateArea() {
    console.log("Area not defined for generic shape.");
  }
}

class Circle extends Shape {
  constructor(radius) {
    super();
    this.radius = radius;
  }

  calculateArea() {
    console.log(`Circle Area: ${Math.PI * this.radius * this.radius}`);
  }
}

class Rectangle extends Shape {
  constructor(length, width) {
    super();
    this.length = length;
    this.width = width;
  }

  calculateArea() {
    console.log(`Rectangle Area: ${this.length * this.width}`);
  }
}

const shapes = [new Circle(5), new Rectangle(4, 6)];
shapes.forEach(shape => shape.calculateArea());

Task 3)

